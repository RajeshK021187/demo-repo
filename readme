# Neo4j Gen AI Healthcare Analytics Demo

## Introduction
This demo showcases how **Neo4j** and **Generative AI** can be used to analyze **healthcare data**, discover patterns, and perform **predictive analysis** using graph-based insights. We'll use **Streamlit** to build an interactive UI for data visualization.

## Features
1. **Graph-based Patient Data Analysis**: Discover relationships between patients, diseases, and treatments.
2. **Generative AI Insights**: Use AI to generate explanations for patient conditions based on graph patterns.
3. **Predictive Analysis**: Forecast potential disease risks based on historical data.
4. **Interactive Dashboard**: Visualize patient connections, treatments, and outcomes in **Streamlit**.

## Step 1: Setting Up Neo4j
First, install and run **Neo4j** locally or use **Neo4j Aura** (cloud version).

```bash
pip install neo4j streamlit pandas matplotlib
```

Start Neo4j and create a sample dataset for healthcare analytics.

## Step 2: Import Healthcare Data into Neo4j
Use **Cypher queries** to create nodes and relationships.

```cypher
CREATE (:Patient {id: 'P1', name: 'Alice', age: 45})
CREATE (:Patient {id: 'P2', name: 'Bob', age: 55})
CREATE (:Disease {name: 'Diabetes'})
CREATE (:Treatment {name: 'Metformin'})
CREATE (:Hospital {name: 'City Hospital'})

MATCH (p:Patient {name: 'Alice'}), (d:Disease {name: 'Diabetes'})
CREATE (p)-[:HAS_DISEASE]->(d);

MATCH (p:Patient {name: 'Alice'}), (t:Treatment {name: 'Metformin'})
CREATE (p)-[:RECEIVED_TREATMENT]->(t);

MATCH (p:Patient {name: 'Bob'}), (h:Hospital {name: 'City Hospital'})
CREATE (p)-[:VISITED]->(h);
```

## Step 3: Build a Streamlit App
Create a file **app.py** for interactive visualization.

```python
import streamlit as st
from neo4j import GraphDatabase
import pandas as pd
import matplotlib.pyplot as plt

# Neo4j Connection
URI = "bolt://localhost:7687"
AUTH = ("neo4j", "password")
driver = GraphDatabase.driver(URI, auth=AUTH)

def get_patients(tx):
    query = """MATCH (p:Patient) RETURN p.name AS name, p.age AS age"""
    return tx.run(query).data()

def get_disease_predictions(tx):
    query = """MATCH (p:Patient)-[:HAS_DISEASE]->(d:Disease) RETURN p.name, d.name"""
    return tx.run(query).data()

# Streamlit UI
st.title("Neo4j Healthcare Analytics Dashboard")

st.subheader("Patient Data")
with driver.session() as session:
    patients = session.read_transaction(get_patients)
    df = pd.DataFrame(patients)
    st.dataframe(df)

st.subheader("Predictive Disease Analysis")
with driver.session() as session:
    predictions = session.read_transaction(get_disease_predictions)
    pred_df = pd.DataFrame(predictions, columns=["Patient", "Disease"])
    st.bar_chart(pred_df.value_counts("Disease"))
```

## Step 4: Add Predictive Analysis
We will use a simple **machine learning model** to predict the likelihood of a patient developing a disease based on their **age** and existing conditions.

```python
from sklearn.linear_model import LogisticRegression
import numpy as np

# Sample dataset
patient_ages = np.array([45, 55, 65, 75, 85])
has_diabetes = np.array([1, 1, 1, 0, 0])  # 1 = Has diabetes, 0 = No diabetes

# Train a model
model = LogisticRegression()
model.fit(patient_ages.reshape(-1, 1), has_diabetes)

# Predict risk for a new patient
new_patient_age = np.array([[50]])
prediction = model.predict_proba(new_patient_age)[0][1]  # Probability of having diabetes

st.subheader("Disease Risk Prediction")
st.write(f"Predicted risk of diabetes for age 50: {prediction:.2f}")
```

## Step 5: Run the Streamlit App
Start the app with:

```bash
streamlit run app.py
```

## Summary
- **Neo4j** stores patient data and relationships.
- **Streamlit** visualizes the data interactively.
- **Generative AI** (Neo4j + AI) explains connections.
- **Predictive Analysis** helps forecast disease risks.

This demo provides an **end-to-end** pipeline for healthcare analytics using **graph databases and AI-driven predictions**. ðŸš€
